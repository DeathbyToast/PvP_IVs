/* cpm array used for calculations, source: https://www.reddit.com/r/TheSilphRoad/comments/jwjbw4/level_4550_expected_cpms_based/ */
const cpm = [0.0939999967813491, 0.135137430784308, 0.166397869586944, 0.192650914456886, 0.215732470154762, 0.236572655026622, 0.255720049142837, 0.273530381100769, 0.29024988412857, 0.306057381335773, 0.321087598800659, 0.335445032295077, 0.349212676286697, 0.36245774877879, 0.375235587358474, 0.387592411085168, 0.399567276239395, 0.41119354951725, 0.422500014305114, 0.432926413410414, 0.443107545375824, 0.453059953871985, 0.46279838681221, 0.472336077786704, 0.481684952974319, 0.490855810259008, 0.499858438968658, 0.508701756943992, 0.517393946647644, 0.525942508771329, 0.534354329109191, 0.542635762230353, 0.550792694091796, 0.558830599438087, 0.566754519939422, 0.574569148039264, 0.582278907299041, 0.589887911977272, 0.59740000963211, 0.604823657502073, 0.61215728521347, 0.61940411056605, 0.626567125320434, 0.633649181622743, 0.640652954578399, 0.647580963301656, 0.654435634613037, 0.661219263506722, 0.667934000492096, 0.674581899290818, 0.681164920330047, 0.687684905887771, 0.694143652915954, 0.700542893277978, 0.706884205341339, 0.713169102333341, 0.719399094581604, 0.725575616972598, 0.731700003147125, 0.734741011137376, 0.737769484519958, 0.740785574597326, 0.743789434432983, 0.746781208702482, 0.749761044979095, 0.752729105305821, 0.75568550825119, 0.758630366519684, 0.761563837528228, 0.764486065255226, 0.767397165298461, 0.77029727397159, 0.77318650484085, 0.776064945942412, 0.778932750225067, 0.781790064808426, 0.784636974334716, 0.787473583646825, 0.790300011634826, 0.792803950958807, 0.795300006866455, 0.79780392148697, 0.800300002098083, 0.802803892322847, 0.805299997329711, 0.807803863460723, 0.81029999256134, 0.812803834895026, 0.815299987792968, 0.817803806620319, 0.820299983024597, 0.822803778631297, 0.825299978256225, 0.827803750922782, 0.830299973487854, 0.832803753381377, 0.835300028324127, 0.837803755931569, 0.840300023555755, 0.842803729034748, 0.845300018787384, 0.847803702398935, 0.850300014019012, 0.852803676019539, 0.85530000925064, 0.857803649892077, 0.860300004482269, 0.862803624012168, 0.865299999713897];

export default function calculateCP(baseatk, basedef, basesta, atkIV, defIV, staIV, level) {
  const index = (level - 1) * 2;
  const cp = Math.max(10, Math.floor((baseatk + atkIV) * Math.sqrt(basedef + defIV) * Math.sqrt(basesta + staIV) * cpm[index] * cpm[index] / 10));
  return cp;
}

function calculateLevel(baseatk, basedef, basesta, atkIV, defIV, staIV, cp) {
  // binary search for a level
  const levels = [
    1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6,
    6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5,
    12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17,
    17.5, 18, 18.5, 19, 19.5, 20, 20.5, 21, 21.5, 22, 22.5,
    23, 23.5, 24, 24.5, 25, 25.5, 26, 26.5, 27, 27.5, 28,
    28.5, 29, 29.5, 30, 30.5, 31, 31.5, 32, 32.5, 33, 33.5,
    34, 34.5, 35, 35.5, 36, 36.5, 37, 37.5, 38, 38.5, 39,
    39.5, 40, 40.5, 41, 41.5, 42, 42.5, 43, 43.5, 44, 44.5,
    45, 45.5, 46, 46.5, 47, 47.5, 48, 48.5, 49, 49.5, 50,
    50.5, 51];
  let left = 0;
  let right = levels.length;
  let mid;
  let level;
  let levelCP;

  while (left < right) {
    mid = Math.floor((left + right) / 2);
    level = levels[mid];
    levelCP = calculateCP(baseatk, basedef, basesta, atkIV, defIV, staIV, level)

    if (levelCP === cp) {
      return level;
    }
    else if (levelCP > cp) {
      right = mid;
    }
    else if (levelCP < cp) {
      left = mid + 1;
    }
  }
  return -1;
}
